{"version":3,"file":"store.js","sources":["../../../modules/store/src/directives/ngLet.ts","../../../modules/store/src/operators/untilDestroy.ts","../../../modules/store/src/operators/pluck.ts","../../../modules/store/src/services/web-worker.ts","../../../modules/store/src/decorators/select.ts","../../../modules/store/src/decorators/pluck.ts","../../../modules/store/src/decorators/ngrx-select.module.ts"],"sourcesContent":["import { NgModule, Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\nexport class NgLetContext {\n  $implicit: any = null;\n  ngLet: any = null;\n}\n\n@Directive({\n  selector: '[ngLet]'\n})\nexport class NgLetDirective {\n  private _context = new NgLetContext();\n\n  @Input()\n  set ngLet(value: any) {\n    this._context.$implicit = this._context.ngLet = value;\n  }\n\n  constructor(_vcr: ViewContainerRef, _templateRef: TemplateRef<NgLetContext>) {\n    _vcr.createEmbeddedView(_templateRef, this._context);\n  }\n}\n\n@NgModule({\n  declarations: [NgLetDirective],\n  exports: [NgLetDirective]\n})\nexport class NgLetModule {}\n","import { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { MonoTypeOperatorFunction } from 'rxjs/interfaces';\n\n// create a symbol identify the observable I add to\n// the component so it doesn't conflict with anything.\n// I need this so I'm able to add the desired behaviour to the component.\nexport const destroy$ = Symbol('destroy$');\n\n/**\n * An operator that takes until destroy it takes a components this a parameter\n * returns a pipeable RxJS operator.\n */\nexport const untilDestroy = <T>(component: any): MonoTypeOperatorFunction<T> => {\n  if (component[destroy$] === undefined) {\n    // only hookup each component once.\n    addDestroyObservableToComponent(component);\n  }\n\n  // pipe in the takeUntil destroy$ and return the source unaltered\n  return takeUntil<T>(component[destroy$]);\n};\n\n/**\n * @internal\n */\nexport function addDestroyObservableToComponent(component: any) {\n  component[destroy$] = new Observable<void>(observer => {\n    // keep track of the original destroy function,\n    // the user might do something in there\n    const orignalDestroy = component.ngOnDestroy;\n    if (!orignalDestroy) {\n      // Angular does not support dynamic added destroy methods\n      // so make sure there is one.\n      throw new Error('untilDestroy operator needs the component to have an ngOnDestroy method');\n    }\n    // replace the ngOndestroy\n    component.ngOnDestroy = () => {\n      // fire off the destroy observable\n      observer.next();\n      // complete the observable\n      observer.complete();\n      // and at last, call the original destroy\n      orignalDestroy.call(component);\n    };\n    // return cleanup function.\n    return (_: any) => (component[destroy$] = undefined);\n  });\n}\n","import { OperatorFunction } from 'rxjs/interfaces';\nimport { pluck as pluckOperator } from 'rxjs/operators/pluck';\n\n/**\n * Strong typed pluck function to replace\n * rxjs/operators/pluck\n *\n * Accept max 4 properties name\n */\nexport function pluck<A, B extends keyof A>(s1: B): OperatorFunction<A, A[B]>;\nexport function pluck<A, B extends keyof A, C extends keyof A[B]>(\n  s1: B,\n  s2: C\n): OperatorFunction<A, A[B][C]>;\nexport function pluck<A, B extends keyof A, C extends keyof A[B], D extends keyof A[B][C]>(\n  s1: B,\n  s2: C,\n  s3: D\n): OperatorFunction<A, A[B][C][D]>;\nexport function pluck<\n  A,\n  B extends keyof A,\n  C extends keyof A[B],\n  D extends keyof A[B][C],\n  E extends keyof A[B][C][D]\n>(s1: B, s2: C, s3: D, s4: E): OperatorFunction<A, A[B][C][D][E]>;\nexport function pluck<\n  A,\n  B extends keyof A,\n  C extends keyof A[B],\n  D extends keyof A[B][C],\n  E extends keyof A[B][C][D],\n  F extends keyof A[B][C][D][E]\n>(s1: B, s2: C, s3: D, s4: E, s5: F): OperatorFunction<A, A[B][C][D][E][F]>;\nexport function pluck<\n  A,\n  B extends keyof A,\n  C extends keyof A[B],\n  D extends keyof A[B][C],\n  E extends keyof A[B][C][D],\n  F extends keyof A[B][C][D][E],\n  G extends keyof A[B][C][D][E][F]\n>(s1: B, s2: C, s3: D, s4: E, s5: F, s6: G): OperatorFunction<A, A[B][C][D][E][F][G]>;\nexport function pluck<T, V>(...props: string[]): OperatorFunction<T, V> {\n  return pluckOperator<T, V>(...props);\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class WebWorkerService {\n  private workerFunctionToUrlMap = new WeakMap<Function, string>();\n  private promiseToWorkerMap = new WeakMap<Promise<any>, Worker>();\n\n  run<T>(fn: (input: any) => void, data?: any): Promise<T> {\n    const url = this.getOrCreateWorkerUrl(fn);\n    return this.runUrl(url, data);\n  }\n\n  runUrl(url: string, data?: any): Promise<any> {\n    const worker = new Worker(url);\n    const promise = this.createPromiseForWorker(worker, data);\n    const promiseCleaner = this.createPromiseCleaner(promise);\n\n    this.promiseToWorkerMap.set(promise, worker);\n\n    promise.then(promiseCleaner).catch(promiseCleaner);\n\n    return promise;\n  }\n\n  terminate<T>(promise: Promise<T>): Promise<T> {\n    return this.removePromise(promise);\n  }\n\n  getWorker(promise: Promise<any>): Worker {\n    const worker = this.promiseToWorkerMap.get(promise);\n    if (worker) {\n      return worker;\n    }\n\n    throw new Error('Could not find Worker for promise');\n  }\n\n  private createPromiseForWorker<T>(worker: Worker, data: any) {\n    return new Promise<T>((resolve, reject) => {\n      worker.addEventListener('message', event => resolve(event.data));\n      worker.addEventListener('error', reject);\n      worker.postMessage(data);\n    });\n  }\n\n  private getOrCreateWorkerUrl(fn: Function): string {\n    if (!this.workerFunctionToUrlMap.has(fn)) {\n      const url = this.createWorkerUrl(fn);\n      this.workerFunctionToUrlMap.set(fn, url);\n      return url;\n    }\n    return this.workerFunctionToUrlMap.get(fn)!;\n  }\n\n  private createWorkerUrl(fn: Function): string {\n    const resolveString = fn.toString();\n    const webWorkerTemplate = `\n            self.addEventListener('message', function(e) {\n                postMessage((${resolveString})(e.data));\n            });\n        `;\n    const blob = new Blob([webWorkerTemplate], { type: 'text/javascript' });\n    return URL.createObjectURL(blob);\n  }\n\n  private createPromiseCleaner<T>(promise: Promise<T>): (input: any) => T {\n    return event => {\n      this.removePromise(promise);\n      return event;\n    };\n  }\n\n  private removePromise<T>(promise: Promise<T>): Promise<T> {\n    const worker = this.promiseToWorkerMap.get(promise);\n    if (worker) {\n      worker.terminate();\n    }\n    this.promiseToWorkerMap.delete(promise);\n    return promise;\n  }\n}\n\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  providers: [WebWorkerService]\n})\nexport class WebWorkerModule {}\n","import { Selector } from '@ngrx/store';\nimport { OperatorFunction } from 'rxjs/interfaces';\n\nimport { NgrxSelect } from './ngrx-select.module';\n\nexport function Select<A, B>(mapFn: Selector<A, B>): (target: any, name: string) => void;\nexport function Select<A, B, C>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E>(\n  mapFn: (state: A) => B,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G, H>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>,\n  op6: OperatorFunction<G, H>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G, H, I>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>,\n  op6: OperatorFunction<G, H>,\n  op7: OperatorFunction<H, I>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G, H, I, J>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>,\n  op6: OperatorFunction<G, H>,\n  op7: OperatorFunction<H, I>,\n  op8: OperatorFunction<I, J>\n): (target: any, name: string) => void;\n\n/**\n * Select decorator act like pipe operator of Observable\n * except the first parameter is a selector to select a piece\n * of state from @ngrx/store and you won't be able to subscribe to it\n * @example\n * export class MyComponent {\n *   @Select(fromStore.getAuth, take(1))\n *   isAuth: Observable<boolean>\n * }\n */\nexport function Select<A, B>(\n  mapFn: ((state: A) => B),\n  ...operations: OperatorFunction<any, any>[]\n) {\n  return function(target: any, name: string): void {\n    if (typeof mapFn !== 'function') {\n      throw new TypeError(\n        `Unexpected type '${typeof mapFn}' in select operator,` + ` expected 'function'`\n      );\n    }\n\n    /**\n     * Get property descriptor for more precise define object property\n     */\n    const descriptor = Object.getOwnPropertyDescriptor(target, name);\n\n    if (delete target[name]) {\n      Object.defineProperty(target, name, {\n        get() {\n          const source$ = NgrxSelect.store;\n\n          if (!source$) {\n            throw new Error('NgrxSelect not connected to store!');\n          }\n\n          return source$.select(mapFn).pipe(...operations);\n        },\n        ...descriptor\n      });\n    }\n  };\n}\n","import { pluck as pluckOperator } from 'rxjs/operators/pluck';\n\nimport { NgrxSelect } from './ngrx-select.module';\n\n/**\n * Provide an utility for select a piece of state from Root State.\n * Support shorthand syntax with 'dot' split property name and leave it empty\n * will use the component property name.\n * @example\n * export class MyComponent {\n *   @Pluck() prop1: Observable<any>\n *   @Pluck('feature.prop2') prop2: Observable<any>\n *   @Pluck('feature', 'prop3') prop3: Observable<any>\n * }\n */\nexport function Pluck(path?: string, ...paths: string[]) {\n  return function(target: any, name: string) {\n    let props: string[];\n\n    if (!path) {\n      path = name;\n    }\n\n    if (typeof path !== 'string') {\n      throw new TypeError(\n        `Unexpected type '${typeof path}' in select operator,` + ` expected 'string'`\n      );\n    }\n\n    props = paths.length ? [path, ...paths] : path.split('.');\n\n    /**\n     * Get property descriptor for more precise define object property\n     */\n    const descriptor = Object.getOwnPropertyDescriptor(target, name);\n\n    if (delete target[name]) {\n      Object.defineProperty(target, name, {\n        get() {\n          const source$ = NgrxSelect.store;\n\n          if (!source$) {\n            throw new Error('NgrxSelect not connected to store!');\n          }\n\n          return source$.pipe(pluckOperator(...props));\n        },\n        ...descriptor\n      });\n    }\n  };\n}\n","import { NgModule, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class NgrxSelect {\n  /**\n   * @internal\n   */\n  static store: Store<any> | undefined = undefined;\n\n  /**\n   * @internal\n   */\n  connect(store: Store<any>) {\n    NgrxSelect.store = store;\n  }\n}\n\n@NgModule({\n  providers: [NgrxSelect]\n})\nexport class NgrxSelectModule {\n  constructor(ngrxSelect: NgrxSelect, store: Store<any>) {\n    ngrxSelect.connect(store);\n  }\n}\n"],"names":["pluckOperator","pluck"],"mappings":";;;;;;;;;;AMAA,AAIA,MAAA,UAAA,CAAA;;;;;;IASE,OAAO,CAAC,KAAiB,EAA3B;QACI,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;KAC1B;;;;;AAPH,UAAA,CAAA,KAAA,GAAyC,SAAS,CAAlD;;IALA,EAAA,IAAA,EAAC,UAAU,EAAX;;;;AAkBA,MAAA,gBAAA,CAAA;;;;;IACE,WAAF,CAAc,UAAsB,EAAE,KAAiB,EAAvD;QACI,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAC3B;;;IANH,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,SAAS,EAAE,CAAC,UAAU,CAAC;aACxB,EAAD,EAAA;;;;IAhBA,EAAA,IAAA,EAAa,UAAU,GAAvB;IAHA,EAAA,IAAA,EAAS,KAAK,GAAd;;;;;;;ADDA;;;;;;;;;;;;;;AAeA,AAAA,SAAA,KAAA,CAAsB,IAAa,EAAE,GAAG,KAAe,EAAvD;IACE,OAAO,UAAS,MAAW,EAAE,IAAY,EAA3C;QACI,qBAAI,KAAe,CAAC;QAEpB,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,GAAG,IAAI,CAAC;SACb;QAED,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,MAAM,IAAI,SAAS,CACjB,CADR,iBAAA,EAC4B,OAAO,IAAI,CADvC,qBAAA,CAC8D,GAAG,CADjE,kBAAA,CACqF,CAC9E,CAAC;SACH;QAED,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;;;QAK1D,uBAAM,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAEjE,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,EAAxC,MAAA,CAAA,MAAA,CAAA;;;gBACQ,GAAG,GAAX;oBACU,uBAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC;oBAEjC,IAAI,CAAC,OAAO,EAAE;wBACZ,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;qBACvD;oBAED,OAAO,OAAO,CAAC,IAAI,CAACA,KAAa,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;iBAC9C,EAAT,EACW,UAAU,CADrB,CAEQ,CAAC;SACJ;KACF,CAAC;CACH;;;;;;ADhDD;;;;;;;;;;;;;;AA0EA,AAAA,SAAA,MAAA,CACE,KAAwB,EACxB,GAAG,UAAwC,EAF7C;IAIE,OAAO,UAAS,MAAW,EAAE,IAAY,EAA3C;QACI,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;YAC/B,MAAM,IAAI,SAAS,CACjB,CADR,iBAAA,EAC4B,OAAO,KAAK,CADxC,qBAAA,CAC+D,GAAG,CADlE,oBAAA,CACwF,CACjF,CAAC;SACH;;;;QAKD,uBAAM,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAEjE,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,EAAxC,MAAA,CAAA,MAAA,CAAA;;;gBACQ,GAAG,GAAX;oBACU,uBAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC;oBAEjC,IAAI,CAAC,OAAO,EAAE;wBACZ,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;qBACvD;oBAED,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;iBAClD,EAAT,EACW,UAAU,CADrB,CAEQ,CAAC;SACJ;KACF,CAAC;CACH;;;;;;;;;;;AD5GD,AAGA,MAAA,gBAAA,CAAA;;QACA,IAAA,CAAA,sBAAA,GAAmC,IAAI,OAAO,EAAoB,CAAlE;QACA,IAAA,CAAA,kBAAA,GAA+B,IAAI,OAAO,EAAwB,CAAlE;;;;;;;;IAEE,GAAG,CAAI,EAAwB,EAAE,IAAU,EAA7C;QACI,uBAAM,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KAC/B;;;;;;IAED,MAAM,CAAC,GAAW,EAAE,IAAU,EAAhC;QACI,uBAAM,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;QAC/B,uBAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC1D,uBAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QAE1D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAE7C,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAEnD,OAAO,OAAO,CAAC;KAChB;;;;;;IAED,SAAS,CAAI,OAAmB,EAAlC;QACI,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;KACpC;;;;;IAED,SAAS,CAAC,OAAqB,EAAjC;QACI,uBAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,MAAM,EAAE;YACV,OAAO,MAAM,CAAC;SACf;QAED,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;KACtD;;;;;;;IAEO,sBAAsB,CAAI,MAAc,EAAE,IAAS,EAA7D;QACI,OAAO,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,KAA1C;YACM,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SAC1B,CAAC,CAAC;;;;;;IAGG,oBAAoB,CAAC,EAAY,EAA3C;QACI,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YACxC,uBAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YACrC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YACzC,OAAO,GAAG,CAAC;SACZ;QACD,0BAAO,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,EAAE,CAAC,GAAE;;;;;;IAGtC,eAAe,CAAC,EAAY,EAAtC;QACI,uBAAM,aAAa,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;QACpC,uBAAM,iBAAiB,GAAG,CAA9B;;6BAEA,EAA+B,aAAa,CAA5C;;QAEA,CAAS,CAAC;QACN,uBAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,iBAAiB,CAAC,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;QACxE,OAAO,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;;;;;;;IAG3B,oBAAoB,CAAI,OAAmB,EAArD;QACI,OAAO,KAAK,IAAhB;YACM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC5B,OAAO,KAAK,CAAC;SACd,CAAC;;;;;;;IAGI,aAAa,CAAI,OAAmB,EAA9C;QACI,uBAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,SAAS,EAAE,CAAC;SACpB;QACD,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACxC,OAAO,OAAO,CAAC;;;;IA5EnB,EAAA,IAAA,EAAC,UAAU,EAAX;;;;AAqFA,MAAA,eAAA,CAAA;;;IAHA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,SAAS,EAAE,CAAC,gBAAgB,CAAC;aAC9B,EAAD,EAAA;;;;;;;;;;;;;;ADrFA;;;;;AA0CA,AAAA,SAAAC,OAAA,CAA4B,GAAG,KAAe,EAA9C;IACE,OAAOD,KAAa,CAAO,GAAG,KAAK,CAAC,CAAC;CACtC;;;;;;AD7CD;;;AAOA,AAAO,uBAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;;;;;AAM3C,AAAA,MAAA,iBAAa,YAAY,GAAG,CAAI,SAAc,KAA9C;IACE,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;;QAErC,+BAA+B,CAAC,SAAS,CAAC,CAAC;KAC5C;;IAGD,OAAO,SAAS,CAAI,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;CAC1C,CAAC;;;;;;AAKF,AAAA,SAAA,+BAAA,CAAgD,SAAc,EAA9D;IACE,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,UAAU,CAAO,QAAQ,IAArD;;;QAGI,uBAAM,cAAc,GAAG,SAAS,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,cAAc,EAAE;;;YAGnB,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;SAC5F;;QAED,SAAS,CAAC,WAAW,GAAG,MAA5B;;YAEM,QAAQ,CAAC,IAAI,EAAE,CAAC;;YAEhB,QAAQ,CAAC,QAAQ,EAAE,CAAC;;YAEpB,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAChC,CAAC;;QAEF,OAAO,CAAC,CAAM,MAAM,SAAS,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,CAAC;KACtD,CAAC,CAAC;CACJ;;;;;;;;;;;ADhDD,AAEA,MAAA,YAAA,CAAA;;QACA,IAAA,CAAA,SAAA,GAAmB,IAAI,CAAvB;QACA,IAAA,CAAA,KAAA,GAAe,IAAI,CAAnB;;CACC;AAKD,MAAA,cAAA,CAAA;;;;;IAQE,WAAF,CAAc,IAAsB,EAAE,YAAuC,EAA7E;QAPA,IAAA,CAAA,QAAA,GAAqB,IAAI,YAAY,EAAE,CAAvC;QAQI,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;KACtD;;;;;IANH,IAAM,KAAK,CAAC,KAAU,EAAtB;QACI,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;;;;IAR1D,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;gBACT,QAAQ,EAAE,SAAS;aACpB,EAAD,EAAA;;;;IATA,EAAA,IAAA,EAAkD,gBAAgB,GAAlE;IAAA,EAAA,IAAA,EAAqC,WAAW,GAAhD;;;IAaA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,EAAA;;AAcA,MAAA,WAAA,CAAA;;;IAJA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,YAAY,EAAE,CAAC,cAAc,CAAC;gBAC9B,OAAO,EAAE,CAAC,cAAc,CAAC;aAC1B,EAAD,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;"}