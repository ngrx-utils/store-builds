{"version":3,"file":"store.umd.js","sources":["../../../modules/store/src/pluck.ts","../../../modules/store/src/select.ts","../../../modules/store/src/module.ts"],"sourcesContent":["import { Selector, select } from '@ngrx/store';\nimport { NgrxSelect } from './module';\n\n/**\n * Provide an utility for select a piece of state from Root State.\n * Support shorthand syntax with 'dot' split property name and leave it empty\n * will use the component property name.\n * @example\n * export class MyComponent {\n *   @Select() prop1: Observable<any>\n *   @Select('feature.prop2') prop2: Observable<any>\n *   @Select('feature', 'prop3') prop3: Observable<any>\n * }\n */\nexport function Pluck<A = any, B = any>(path?: string, ...paths: string[]) {\n  return function(target: any, name: string) {\n    let fn: Selector<A, B>;\n\n    if (!path) {\n      path = name;\n    }\n\n    if (typeof path !== 'string') {\n      throw new TypeError(`Unexpected type '${typeof path}' in select operator,` + ` expected 'string'`);\n    }\n\n    fn = getPropFactory(paths.length ? [path, ...paths] : path.split('.'));\n\n    if (delete target[name]) {\n      Object.defineProperty(target, name, {\n        get: () => {\n          const source$ = NgrxSelect.store;\n\n          if (!source$) {\n            throw new Error('NgrxSelect not connected to store!');\n          }\n\n          return source$.pipe(select(fn));\n        },\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n\nfunction getPropFactory(paths: string[]) {\n  return (state: { [prop: string]: any }) =>\n    paths.reduce((prev, cur) => {\n      return prev && prev[cur];\n    }, state);\n}\n","import { select, Selector } from '@ngrx/store';\nimport { OperatorFunction } from 'rxjs/interfaces';\n\nimport { NgrxSelect } from './module';\n\nexport function Select<A, B>(mapFn: Selector<A, B>): (target: any, name: string) => void;\nexport function Select<A, B, C>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E>(\n  mapFn: (state: A) => B,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G, H>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>,\n  op6: OperatorFunction<G, H>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G, H, I>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>,\n  op6: OperatorFunction<G, H>,\n  op7: OperatorFunction<H, I>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G, H, I, J>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>,\n  op6: OperatorFunction<G, H>,\n  op7: OperatorFunction<H, I>,\n  op8: OperatorFunction<I, J>\n): (target: any, name: string) => void;\n\n/**\n * Select decorator act like pipe operator of Observable\n * except the first parameter is a selector to select a piece\n * of state from @ngrx/store and you won't be able to subscribe to it\n * @example\n * export class MyComponent {\n *   @Select(fromStore.getAuth, take(1))\n *   isAuth: Observable<boolean>\n * }\n */\nexport function Select<A, B>(mapFn: ((state: A) => B), ...operations: OperatorFunction<any, any>[]) {\n  return function(target: any, name: string): void {\n    if (typeof mapFn !== 'function') {\n      throw new TypeError(`Unexpected type '${typeof mapFn}' in select operator,` + ` expected 'function'`);\n    }\n\n    if (delete target[name]) {\n      Object.defineProperty(target, name, {\n        get: () => {\n          const source$ = NgrxSelect.store;\n\n          if (!source$) {\n            throw new Error('NgrxSelect not connected to store!');\n          }\n\n          return source$.pipe(select(mapFn), ...operations);\n        },\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","import { NgModule, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class NgrxSelect {\n  /**\n   * @internal\n   */\n  static store: Store<any> | undefined = undefined;\n\n  connect(store: Store<any>) {\n    NgrxSelect.store = store;\n  }\n}\n\n@NgModule({\n  providers: [NgrxSelect]\n})\nexport class NgrxUtilsModule {}\n"],"names":["select","NgModule","Injectable","store"],"mappings":"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"}