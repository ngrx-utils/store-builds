{
  "version": 3,
  "file": "ngrx-utils-store.umd.js",
  "sources": [
    "ng://@ngrx-utils/store/projects/store/src/pipes/push.ts",
    "ng://@ngrx-utils/store/projects/store/src/directives/routerLinkMatch.ts",
    "ng://@ngrx-utils/store/projects/store/src/operators/pluck.ts",
    "ng://@ngrx-utils/store/projects/store/src/operators/untilDestroy.ts",
    "ng://@ngrx-utils/store/projects/store/src/directives/ngLet.ts",
    "ng://@ngrx-utils/store/projects/store/src/decorators/select.ts",
    "ng://@ngrx-utils/store/projects/store/src/decorators/pluck.ts",
    "ng://@ngrx-utils/store/projects/store/src/decorators/dispatch.ts",
    "ng://@ngrx-utils/store/projects/store/src/decorators/ngrx-select.ts"
  ],
  "sourcesContent": [
    "import {\n  ChangeDetectorRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n  WrappedValue,\n  ɵisObservable as isObservable,\n  ɵisPromise as isPromise\n} from '@angular/core';\nimport { Observable, SubscriptionLike } from 'rxjs';\nimport { Type, ɵstringify as stringify } from '@angular/core';\n\nexport function invalidPipeArgumentError(type: Type<any>, value: Object) {\n  return Error(`InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);\n}\n\ninterface SubscriptionStrategy {\n  createSubscription(\n    async: Observable<any> | Promise<any>,\n    updateLatestValue: any\n  ): SubscriptionLike | Promise<any>;\n  dispose(subscription: SubscriptionLike | Promise<any>): void;\n}\n\nclass ObservableStrategy implements SubscriptionStrategy {\n  createSubscription(async: Observable<any>, updateLatestValue: any): SubscriptionLike {\n    return async.subscribe({\n      next: updateLatestValue,\n      error: (e: any) => {\n        throw e;\n      }\n    });\n  }\n\n  dispose(subscription: SubscriptionLike): void {\n    subscription.unsubscribe();\n  }\n}\n\nclass PromiseStrategy implements SubscriptionStrategy {\n  createSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => {\n      throw e;\n    });\n  }\n\n  dispose(subscription: Promise<any>): void {}\n}\n\nconst _promiseStrategy = new PromiseStrategy();\nconst _observableStrategy = new ObservableStrategy();\n\n/**\n * @ngModule PushPipeModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `push` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `push` pipe will run change detection and it works\n * even when `zone` has been disabled. When the component gets destroyed,\n * the `push` pipe unsubscribes automatically to avoid potential memory leaks.\n *\n */\n@Pipe({ name: 'push', pure: false })\nexport class PushPipe implements PipeTransform, OnDestroy {\n  private _latestValue: any = null;\n  private _latestReturnedValue: any = null;\n\n  private _subscription: SubscriptionLike | Promise<any> | null = null;\n  private _obj: Observable<any> | Promise<any> | EventEmitter<any> | null = null;\n  private _strategy: SubscriptionStrategy = null!;\n\n  constructor(private _ref: ChangeDetectorRef) {}\n\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T> | Promise<T> | null | undefined): T | null;\n  transform(obj: Observable<any> | Promise<any> | null | undefined): any {\n    if (this._obj === null) {\n      if (obj != null) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj as any);\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n\n  ngOnDestroy() {\n    if (this._subscription !== null) {\n      this._dispose();\n    }\n  }\n\n  private _subscribe(obj: Observable<any> | Promise<any> | EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(obj, (value: Object) =>\n      this._updateLatestValue(obj, value)\n    );\n  }\n\n  private _dispose(): void {\n    this._strategy.dispose(this._subscription!);\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n\n  private _selectStrategy(obj: Observable<any> | Promise<any> | EventEmitter<any>): any {\n    if (isPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (isObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(PushPipe, obj);\n  }\n\n  private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.detectChanges();\n    }\n  }\n}\n\n@NgModule({\n  exports: [PushPipe],\n  declarations: [PushPipe]\n})\nexport class PushPipeModule {}\n",
    "import {\n  Directive,\n  ElementRef,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { combineLatest, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { untilDestroy } from '../operators';\n\nexport interface MatchExp {\n  [classes: string]: string;\n}\n\n@Directive({\n  selector: '[routerLinkMatch]'\n})\nexport class RouterLinkMatch implements OnDestroy, OnChanges {\n  private _curRoute: string;\n  private _matchExp: MatchExp;\n  private _onChangesHook = new Subject<MatchExp>();\n\n  @Input('routerLinkMatch')\n  set routerLinkMatch(v: MatchExp) {\n    if (v && typeof v === 'object') {\n      this._matchExp = v;\n    } else {\n      throw new TypeError(\n        `Unexpected type '${typeof v}' of value for ` +\n          `input of routerLinkMatch directive, expected 'object'`\n      );\n    }\n  }\n\n  constructor(router: Router, private _renderer: Renderer2, private _ngEl: ElementRef) {\n    combineLatest(router.events, this._onChangesHook)\n      .pipe(map(([e]) => e), filter(e => e instanceof NavigationEnd), untilDestroy(this))\n      .subscribe(e => {\n        this._curRoute = (e as NavigationEnd).urlAfterRedirects;\n\n        this._updateClass(this._matchExp);\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['routerLinkMatch']) {\n      this._onChangesHook.next(changes['routerLinkMatch'].currentValue);\n    }\n  }\n\n  private _updateClass(v: MatchExp): void {\n    Object.keys(v).forEach(cls => {\n      if (v[cls] && typeof v[cls] === 'string') {\n        const regexp = new RegExp(v[cls]);\n        if (this._curRoute.match(regexp)) {\n          this._toggleClass(cls, true);\n        } else {\n          this._toggleClass(cls, false);\n        }\n      } else {\n        throw new TypeError(\n          `Could not convert match value to Regular Expression. ` +\n            `Unexpected type '${typeof v[cls]}' for value of key '${cls}' ` +\n            `in routerLinkMatch directive match expression, expected 'non-empty string'`\n        );\n      }\n    });\n  }\n\n  private _toggleClass(classes: string, enabled: boolean): void {\n    classes = classes.trim();\n\n    classes.split(/\\s+/g).forEach(cls => {\n      if (enabled) {\n        this._renderer.addClass(this._ngEl.nativeElement, cls);\n      } else {\n        this._renderer.removeClass(this._ngEl.nativeElement, cls);\n      }\n    });\n  }\n\n  ngOnDestroy() {}\n}\n\n@NgModule({\n  declarations: [RouterLinkMatch],\n  exports: [RouterLinkMatch]\n})\nexport class RouterLinkMatchModule {}\n",
    "import { OperatorFunction } from 'rxjs';\nimport { pluck as plucker } from 'rxjs/operators';\n\n/**\n * Strong typed pluck function to replace\n * rxjs/operators/pluck\n *\n * Accept max 4 properties name\n */\nexport function pluck<A, B extends keyof A>(s1: B): OperatorFunction<A, A[B]>;\nexport function pluck<A, B extends keyof A, C extends keyof A[B]>(\n  s1: B,\n  s2: C\n): OperatorFunction<A, A[B][C]>;\nexport function pluck<A, B extends keyof A, C extends keyof A[B], D extends keyof A[B][C]>(\n  s1: B,\n  s2: C,\n  s3: D\n): OperatorFunction<A, A[B][C][D]>;\nexport function pluck<\n  A,\n  B extends keyof A,\n  C extends keyof A[B],\n  D extends keyof A[B][C],\n  E extends keyof A[B][C][D]\n>(s1: B, s2: C, s3: D, s4: E): OperatorFunction<A, A[B][C][D][E]>;\nexport function pluck<\n  A,\n  B extends keyof A,\n  C extends keyof A[B],\n  D extends keyof A[B][C],\n  E extends keyof A[B][C][D],\n  F extends keyof A[B][C][D][E]\n>(s1: B, s2: C, s3: D, s4: E, s5: F): OperatorFunction<A, A[B][C][D][E][F]>;\nexport function pluck<\n  A,\n  B extends keyof A,\n  C extends keyof A[B],\n  D extends keyof A[B][C],\n  E extends keyof A[B][C][D],\n  F extends keyof A[B][C][D][E],\n  G extends keyof A[B][C][D][E][F]\n>(s1: B, s2: C, s3: D, s4: E, s5: F, s6: G): OperatorFunction<A, A[B][C][D][E][F][G]>;\nexport function pluck<T, V>(...props: string[]): OperatorFunction<T, V>;\nexport function pluck<T, V>(...props: string[]): OperatorFunction<T, V> {\n  return plucker<T, V>(...props);\n}\n",
    "import { MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n// create a symbol identify the observable I add to\n// the component so it doesn't conflict with anything.\n// I need this so I'm able to add the desired behaviour to the component.\nexport const destroy$ = Symbol('destroy$');\n\n/**\n * An operator that takes until destroy it takes a components this a parameter\n * returns a pipeable RxJS operator.\n */\nexport const untilDestroy = <T>(component: any): MonoTypeOperatorFunction<T> => {\n  if (component[destroy$] === undefined) {\n    // only hookup each component once.\n    addDestroyObservableToComponent(component);\n  }\n\n  // pipe in the takeUntil destroy$ and return the source unaltered\n  return takeUntil<T>(component[destroy$]);\n};\n\n/**\n * @internal\n */\nexport function addDestroyObservableToComponent(component: any) {\n  component[destroy$] = new Observable<void>(observer => {\n    // keep track of the original destroy function,\n    // the user might do something in there\n    const orignalDestroy = component.ngOnDestroy;\n    if (orignalDestroy == null) {\n      // Angular does not support dynamic added destroy methods\n      // so make sure there is one.\n      throw new Error('untilDestroy operator needs the component to have an ngOnDestroy method');\n    }\n    // replace the ngOndestroy\n    component.ngOnDestroy = () => {\n      // fire off the destroy observable\n      observer.next();\n      // complete the observable\n      observer.complete();\n      // and at last, call the original destroy\n      orignalDestroy.call(component);\n    };\n    // return cleanup function.\n    return (_: any) => (component[destroy$] = undefined);\n  });\n}\n",
    "import { NgModule, Directive, Input, TemplateRef, ViewContainerRef, OnInit } from '@angular/core';\n\nexport class NgLetContext {\n  $implicit: any = null;\n  ngLet: any = null;\n}\n\n@Directive({\n  selector: '[ngLet]'\n})\nexport class NgLetDirective implements OnInit {\n  private _context = new NgLetContext();\n\n  @Input()\n  set ngLet(value: any) {\n    this._context.$implicit = this._context.ngLet = value;\n  }\n\n  constructor(private _vcr: ViewContainerRef, private _templateRef: TemplateRef<NgLetContext>) {}\n\n  ngOnInit() {\n    this._vcr.createEmbeddedView(this._templateRef, this._context);\n  }\n}\n\n@NgModule({\n  declarations: [NgLetDirective],\n  exports: [NgLetDirective]\n})\nexport class NgLetModule {}\n",
    "import { Selector } from '@ngrx/store';\nimport { OperatorFunction } from 'rxjs';\n\nimport { NgrxSelect } from './ngrx-select';\n\nexport function Select<A, B>(mapFn: Selector<A, B>): (target: any, name: string) => void;\nexport function Select<A, B, C>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E>(\n  mapFn: (state: A) => B,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G, H>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>,\n  op6: OperatorFunction<G, H>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G, H, I>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>,\n  op6: OperatorFunction<G, H>,\n  op7: OperatorFunction<H, I>\n): (target: any, name: string) => void;\nexport function Select<A, B, C, D, E, F, G, H, I, J>(\n  mapFn: Selector<A, B>,\n  op1: OperatorFunction<B, C>,\n  op2: OperatorFunction<C, D>,\n  op3: OperatorFunction<D, E>,\n  op4: OperatorFunction<E, F>,\n  op5: OperatorFunction<F, G>,\n  op6: OperatorFunction<G, H>,\n  op7: OperatorFunction<H, I>,\n  op8: OperatorFunction<I, J>\n): (target: any, name: string) => void;\nexport function Select<A, B, C>(\n  mapFn: Selector<A, B>,\n  ...ops: OperatorFunction<B, C>[]\n): (target: any, name: string) => void;\n\n/**\n * Select decorator act like pipe operator of Observable\n * except the first parameter is a selector to select a piece\n * of state from @ngrx/store and you won't be able to subscribe to it\n * @example\n * export class MyComponent {\n *   @Select(fromStore.getAuth, take(1))\n *   isAuth: Observable<boolean>\n * }\n */\nexport function Select<A, B>(\n  mapFn: ((state: A) => B),\n  ...operations: OperatorFunction<any, any>[]\n) {\n  return function(target: any, propertyKey: string): void {\n    if (typeof mapFn !== 'function') {\n      throw new TypeError(\n        `Unexpected type '${typeof mapFn}' in select operator, expected 'function'`\n      );\n    }\n\n    /**\n     * Get property descriptor for more precise define object property\n     */\n    const descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);\n\n    if (delete target[propertyKey]) {\n      Object.defineProperty(target, propertyKey, {\n        ...descriptor,\n        get() {\n          const store = NgrxSelect.store;\n\n          if (store === null) {\n            throw new Error('NgrxSelect not connected to store!');\n          }\n\n          const source$ = store.select(mapFn);\n\n          return source$.pipe(...operations);\n        }\n      });\n    }\n  };\n}\n",
    "import { pluck as pluckOperator } from 'rxjs/operators';\n\nimport { NgrxSelect } from './ngrx-select';\n\n/**\n * @whatItDoes Provide an utility for select a piece of state from Root State.\n * @howToUse `@Pluck('state') state: Observable<any>`\n * @description Support shorthand syntax with 'dot' split property name and leave it empty\n * will use the component property name.\n * @example\n * export class MyComponent {\n *   @Pluck() prop1: Observable<any>\n *   @Pluck('feature.prop2') prop2: Observable<any>\n *   @Pluck('feature', 'prop3') prop3: Observable<any>\n * }\n */\nexport function Pluck(path?: string, ...paths: string[]) {\n  return function(target: any, propertyKey: string) {\n    let props: string[];\n\n    if (path === undefined || path === '') {\n      path = propertyKey;\n    }\n\n    if (typeof path !== 'string') {\n      throw new TypeError(`Unexpected type '${typeof path}' in pluck operator, expected 'string'`);\n    }\n\n    props = paths.length ? [path, ...paths] : path.split('.');\n\n    /**\n     * Get property descriptor for more precise define object property\n     */\n    const descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);\n\n    if (delete target[propertyKey]) {\n      Object.defineProperty(target, propertyKey, {\n        ...descriptor,\n        get() {\n          const source$ = NgrxSelect.store;\n\n          if (source$ === null) {\n            throw new Error('NgrxSelect not connected to store!');\n          }\n\n          return source$.pipe(pluckOperator(...props));\n        }\n      });\n    }\n  };\n}\n",
    "import { Action, Store } from '@ngrx/store';\n\nimport { NgrxSelect } from './ngrx-select';\n\n/**\n * @whatItDoes Dispatch method returned action.\n * @howToUse `@Dispatch() componentMethod() { return new Action() }`\n */\nexport function Dispatch() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value as Function;\n\n    if (typeof originalMethod !== 'function') {\n      throw new TypeError(\n        `Unexpected type ${typeof originalMethod} of property ${propertyKey}, ` +\n          `expected 'function'`\n      );\n    }\n\n    // editing the descriptor/value parameter\n    descriptor.value = function(...args: any[]) {\n      const source$ = NgrxSelect.store;\n      if (source$ === null) {\n        throw new Error('NgrxSelect not connected to store!');\n      }\n      // note usage of originalMethod here\n      const actions = originalMethod.apply(this, args);\n\n      if (Array.isArray(actions)) {\n        dispatch(source$, actions);\n      } else {\n        dispatch(source$, [actions]);\n      }\n      return actions;\n    };\n\n    // return edited descriptor as opposed to overwriting the descriptor\n    return descriptor;\n  };\n}\n\nexport function dispatch<T extends Action = Action>(source$: Store<any>, actions: T[]) {\n  actions.forEach(action => {\n    if (typeof action !== 'object' || (typeof action === 'object' && !('type' in action))) {\n      throw new TypeError(\n        `Unexpected action in method return type, expected object of type 'Action'`\n      );\n    }\n    source$.dispatch(action);\n  });\n}\n",
    "import { Injectable, NgModule } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgrxSelect {\n  static store: Store<any> | null = null;\n\n  connect(store: Store<any>) {\n    NgrxSelect.store = store;\n  }\n}\n\n@NgModule()\nexport class NgrxSelectModule {\n  constructor(ngrxSelect: NgrxSelect, store: Store<any>) {\n    if (NgrxSelect.store === null) {\n      ngrxSelect.connect(store);\n    }\n  }\n}\n"
  ],
  "names": [
    "WrappedValue",
    "stringify",
    "filter",
    "NavigationEnd",
    "tslib_1.__read",
    "map",
    "combineLatest",
    "router",
    "Subject",
    "Observable",
    "takeUntil",
    "tslib_1.__spread",
    "store",
    "pluckOperator"
  ],
  "mappings": ";;;;;;;;;;AQAA,QAMA,UAAA,IAAA;;;;;;;QAKA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAAY,QAAA;;SAJA,CAAA;;IAJA,CAAA,EAAA,CAAA,CAAA;IACA,UACA,CAAA,KAAA,GAAA,IAAA,CAAA;;;;;;;;;;;;QAeA,0BAAA,UAAA,EAAAA,QAAA;;;aANA;;;;IARA,gBALA,CAAc,UAAd,GAAA;;;;;;;;;;;;;;IDCA;;;;;IAMA;QACE,OAAO,UAAS,MAAW,EAAE,WAAmB,EAAE,UAA8B;YAC9E,qBAAJ,cAAA,IAAA,UAAA,CAAA,KAAA,CAAA,CAAA;YAEI,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;gBACxC,MAAM,IAAI,SAAS,CACjB,kBADR,GAAA,OAAA,cAAA,GAAA,eAAA,GAAA,WAAA,GAAA,IAAA;oBAEU,qBAAqB,CACxB,CAAC;aACH;;YAGD,UAAU,CAAC,KAAK,GAAG;gBACjB,IAAN,IAAA,GAAA,EAAA,CAAA;gBACM,KAAN,IAAA,EAAiB,GAAjB,CAAA,EAAA,EAAA,GAA4B,SAA5B,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;oBACQ,IAAR,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;iBACO;;gBAED,IAAN,OAAA,KAAA,IAAA,EAAA;oBAEU,MAAM,IAAhB,KAAA,CAAA,oCAAA,CAAA,CAAA;iBACA;;gBACQ,qBAAR,OAAA,GAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;gBACA,IAAQ,KAAR,CAAA,OAAA,CAAA,OAAA,CAAA,EAAA;oBACA,QAAA,CAAA,OAAA,EAAA,OAAA,CAAA,CAAA;iBACA;qBACA;;iBAGA;gBACA,OAAA,OAAA,CAAA;aACA,CAAA;;;;;;;;;;;IAQA,kBAAA,OAAA,EAAA,OAAA;QACA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA;YACA,IAAA,OAAA,MAAA,KAAA,QAAA,KAAA,OAAA,MAAA,KAAA,QAAA,IAAA,EAAA,MAAA,IAAA,MAAA,CAAA,CAAA,EAAA;gBACA,MAAA,IAAA,SAAA,CAAA,2EAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;IDjCA,eAAA,IAAA;QACA,IAAI,KAAJ,GAAA,EAAA,CAAA;QAEA,KAAA,IAAA,EAAA,GAAA,CAAA,EAAiB,EAAjB,GAAA,SAAA,CAAA,MAAA,EAAA,EAA0C,EAAE,EAA5C;YACA,KAAA,CAAA,EAAU,GAAG,CAAb,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;SACA;QAEA,OAAO,UAAP,MAAA,EAAA,WAAA;YACA,qBAAA,KAAA,CAAA;YACA,IAAA,IAAA,KAAA,SAAA,IAAA,IAAA,KAAA,EAAA,EAAA;gBAEA,IAAY,GAAZ,WAA0B,CAAC;;;;aAK3B;YAEI,KAAJ,GAAA,KAAA,CAAA,MAAA,GAAAD,cAAA,CAAA,CAAA,IAAA,CAAA,EAAA,KAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA;;;;YAGA,qBAAA,UAAA,GAAA,MAAA,CAAA,wBAAA,CAAA,MAAA,EAAA,WAAA,CAAA,CAAA;YACA,IAAA,OAAA,MAAA,CAAA,WAAA,CAAA,EAAA;gBAEA,MAAA,CAAA,cAAA,CAAA,MAA8B,EAAE,WAAhC,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,UAAA,EAAA;oBACA,GAAA,EAAA;wBACA,qBAAA,OAAA,GAAA,UAAA,CAAA,KAAA,CAAA;wBAEU,IAAV,OAAA,KAAA,IAA8B,EAA9B;4BACA,MAAA,IAAA,KAAA,CAAA,oCAAA,CAAA,CAAA;yBAEA;wBACA,OAAA,OAAA,CAAA,IAAA,CAAAE,eAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAAF,cAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;qBACA;;;;;;;;;;;;;;;;;;;IDmCA,gBAAA,KAAA;QACA,IAAI,UAAJ,GAAA,EAAA,CAAoB;QACpB,KAAA,IAAA,EAAA,GAAY,CAAZ,EAAA,EAAA,GAAA,SAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;YAGA,UAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;;;gBAKA,MAAA,IAAA,SAAU,CAAV,mBAA8B,GAA9B,OAAA,KAAA,GAAA,2CAAA,CAAA,CAAA;aAEA;;;;YAGA,qBAAA,UAAA,GAAA,MAAA,CAAA,wBAAA,CAAA,MAAA,EAAA,WAAA,CAAA,CAAA;YACA,IAAA,OAAA,MAAA,CAAA,WAAA,CAAA,EAAA;gBAEA,MAAA,CAAA,cAAA,CAAwB,MAAM,EAA9B,WAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,UAAA,EAAA;oBACA,GAAA,EAAA;wBACA,qBAAAC,QAAA,GAAA,UAAA,CAAA,KAAA,CAAA;wBAEU,IAAVA,QAAA,KAAA,IAAA,EAAA;4BAEA,MAAA,IAAwB,KAAK,CAAC,oCAA9B,CAAA,CAAA;yBAEQ;wBACR,qBAAA,OAAA,GAAAA,QAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA;wBACA,OAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAAD,cAAA,CAAA,UAAA,CAAA,CAAA,CAAA;qBACA;;;;;;;;;;;;;ADlHA,QAEA,YAAA,IAAA;;YACA,IAAA,CAAA,SAAA,GAAmB,IAAI,CAAvB;YACA,IAAA,CAAA,KAAA,GAAe,IAAI,CAAnB;;QACA,OAAA,YAAA,CAAA;;;;;;;QAaA,wBAAsD,IAAtD,EAAA,YAAA;YAPA,IAAA,CAAA,IAAA,GAAA,IAAqB,CAArB;YAOA,IAAA,CAAA,YAAA,GAAA,YAAA,CAAA;;;;;;;;;;;YAEA,UAAA,EAAA,IAAA;YACI,YAAJ,EAAA,IAAA;SACG,CAAH,CAAA;;;;QAdA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA;YACA,IAAA,CAAC,IAAD,CAAA,kBAAA,CAAA,IAAA,CAAA,YAAA,EAAA,IAAA,CAAA,QAAA,CAAA,CAAA;;;;IATA,cAAA,CAAA,UAAA,GAAA;;;iBAaA,EAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;IDbA;;;AAMA,QAAA,iBAAA,QAAA,GAAA,MAAA,CAAA,UAAA,CAAA,CAAyC;;;;;AAMzC,QAAA,iBAAA,YAAA,GAAA,UAAA,SAAA;QACE,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;;YAErC,+BAA+B,CAAC,SAAS,CAAC,CAAC;SAC5C;;QAGD,OAAOD,mBAAS,CAAI,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC;;;;;;IAKF,yCAAgD,SAAc;QAC5D,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAID,eAAU,CAAO,UAA7C,QAAA;;;YAGI,qBAAJ,cAAA,GAAA,SAAA,CAAA,WAAA,CAAA;YACI,IAAI,cAAc,IAAI,IAAI,EAAE;;;gBAG1B,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;aAC5F;;YAED,SAAS,CAAC,WAAW,GAAG;;gBAEtB,QAAQ,CAAC,IAAI,EAAE,CAAC;;gBAEhB,QAAQ,CAAC,QAAQ,EAAE,CAAC;;gBAEpB,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAChC,CAAC;;YAEF,OAAO,UAAX,CAAA,IAAA,QAAA,SAAA,CAAA,QAAyD,CAAzD,GAAA,SAAA,EAAA,EAAA,CAAA;SACG,CAAC,CAAC;IACL,CAAC;;;;;;IDFD;QACA,IAAA,KAAA,GAAA,EAAA,CAAA;;;;;;;;;;;;;;;;QDNA,yBAAAF,SAA0D,EAA1D,SAAA,EAAA,KAAA;YAAoE,IAApE,KAAA,GAAA,IAAA,CAAA;YAdA,IAAA,CAAA,SAAA,GAAA,SAA+B,CAA/B;YAeI,IAAJ,CAAA,KAAA,GAAiB,KAAjB,CAAA;YACA,IAAA,CAAO,cAAP,GAAwB,IAAxBC,YAAmC,EAAE,CAAC;YACtCF,kBAAA,CAAgBC,SAAhB,CAAA,MAAA,EAAA,IAAA,CAAA,cAAA,CAAA;iBACA,IAAa,CAAbF,aAAA,CAAA,UAAA,EAAA;gBAEQ,IAAI,EAAZ,GAAAD,YAA+B,CAA/B,EAAA,EAAA,CAAA,CAAA,EAAwC,CAAC,GAAzC,EAAA,CAAA,CAAA,CAAA,CAAA;gBACA,OAAA,CAAA,CAAA;aACA,CAAA,EAAAF,gBAAA,CAAA,UAAA,CAAA,IAAA,OAAA,CAAA,YAAAC,oBAAA,CAAA,EAAA,CAAA,EAAA,YAAA,CAAA,IAAA,CAAA,CAAA;;;;;SAnBA;QACA,MAAM,CAAC,cAAc,CAArB,eAAqC,CAArC,SAAA,EAAA,iBAAA,EAAA;;;;;YAKA,GAAA,EAAA,UAAA,CAAA;gBAEA,IAAA,CAAA,IAAA,OAAA,CAAA,KAAA,QAAA,EAAA;;;;;;iBAaA;aACA;YACA,UAAA,EAAA,IAAA;YACA,YAAA,EAAA,IAAA;SACG,CAAH,CAAA;;;;;QAEU,eAAV,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,OAAA;YACI,IAAJ,OAAe,CAAC,iBAAiB,CAAjC,EAAA;gBACM,IAAI,CAAC,cAAX,CAAA,IAAA,CAAA,OAAsC,CAAtC,iBAAA,CAAA,CAAA,YAAA,CAAA,CAAA;aACA;SACA,CAAA;;;;;QAIA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAA,CAAA;YACA,IAAA,KAAA,GAAA,IAAA,CAAA;YAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,UAAA,GAAA;gBACA,IAAQ,CAAR,CAAA,GAAA,CAAc,IAAI,OAAlB,CAAA,CAA2B,GAA3B,CAAA,KAAA,QAAA,EAAA;oBAEA,qBAAA,MAAA,GAAA,IAAA,MAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;oBACA,IAAY,KAAZ,CAAA,SAAA,CAAA,KAAA,CAAA,MAAA,CAAA,EAAA;wBAEA,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,IAAA,CAAA,CAAA;qBACA;;;;;;;yBAGA,mBAAA,GAAA,OAAA,CAAA,CAAA,GAAA,CAAA,GAAA,sBAAA,GAAA,GAAA,GAAA,IAAA,CAAA;wBACA,4EAAA,CAAA,CAAA;iBAEA;aACA,CAAA,CAAA;SACA,CAAA;;;;;;;;;;gBAOA,IAAA,OAAA,EAAA;;;qBAnEA;oBACE,KAAF,CAAA,SAAA,CAAA,WAAA,CAAA,KAAA,CAAA,KAAA,CAAA,aAAA,EAAA,GAAA,CAAA,CAAA;iBACC;;;;;;QApBD,eAAA,CAAA,SAAA,CAAA,WAAA,GAAA,eAAA,CAAA;;;IA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ID5BA;;;;;IAcA,kCAAyC,IAAe,EAAE,KAAa;QACrE,OAAO,KAAK,CAAC,wBAAf,GAAA,KAAA,GAAA,cAAA,GAAAF,eAAA,CAAA,IAAA,CAAA,GAAA,GAAA,CAAA,CAAA;IACA,CAAC;QAUD,kBAAA,IAAA;;;;;;;;QAGA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAA,KAAA,EAAA,iBAAA;YACA,OAAA,KAAc,CAAM,SAApB,CAAA;gBACA,IAAQ,EAAR,iBAAA;gBACA,KAAA,EAAA,UAAA,CAAA;oBACA,MAAA,CAAA,CAAA;iBACA;;;;;;;QAIA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAA,YAAA;YACA,YAAA,CAAA,WAAA,EAAA,CAAA;SAEA,CAAA;;;;;;;;;;;;;;;SAOA,CAAA;;;;;;;;;;;;;;;;;;;;;;AAoBA,QAAA,QAAA,IAAA;;;;QAKA,kBAAA,IAAA;YAEA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA;;;;;YAKA,IAAA,CAAW,SAAX,sBAAA,IAAA,EAAA,CAAA;SACA;;;;;QAKA,QAAM,CAAN,SAAA,CAAiB,SAAjB,GAAA,UAAA,GAAA;YACA,IAAA,IAAA,CAAA,IAAA,KAAA,IAAA,EAAA;gBAEQ,IAAR,GAAA,IAAA,IAAA,EAAyB;oBACf,IAAV,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA;iBACA;gBACA,IAAA,CAAA,oBAAA,GAAA,IAAA,CAAA,YAAA,CAAA;gBAEQ,OAAR,IAAA,CAAA,YAAA,CAAA;aACA;YACA,IAAA,GAAA,KAAA,IAAA,CAAA,IAAA,EAAA;gBAEQ,IAAR,CAAA,QAAA,EAAA,CAAA;gBACA,OAAA,IAAA,CAAA,SAA6B,mBAAmB,GAAhD,EAAA,CAAA;aACA;;;;YAEA,IAAA,CAAA,oBAAA,GAAA,IAAA,CAAA,YAAA,CAAA;YACI,OAAJD,iBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA,CAAA;SACA,CAAA;;;;;;;aAIA;SACA,CAAA;;;;;;;YAOA,IAAkB,CAAlB,IAAA,GAAA,GAAA,CAAA;YACI,IAAI,CAAC,SAAS,GAAlB,IAAA,CAA0B,eAA1B,CAAA,GAAA,CAA2B,CAA3B;YACI,IAAI,CAAC,aAAT,GAAA,IAA6B,CAA7B,SAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,UAAA,KAAA,IAAA,OAAA,KAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SACA,CAAA;;;;;;;;YAKA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA;YACI,IAAI,CAAR,IAAA,GAAA,IAAA,CAAqB;SACrB,CAAA;;;;;QAOA,QAAA,CAAA,SAAA,CAAA,eAAkC,GAAlC,UAAA,GAAkD;;;;;;;YAGlD,MAAA,wBAAA,CAAA,QAAA,EAAA,GAAA,CAAA,CAAA;SACA,CAAA;;;;;;;YAvEA,IAAC,KAAD,KAAA,IAAA,CAAQ,IAAI,EAAE;;;;SAjEd,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
}
